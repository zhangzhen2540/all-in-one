#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT%2B8&characterEncoding=utf8
#spring.datasource.username=root
#spring.datasource.password=123456





spring.rabbitmq.username = admin
spring.rabbitmq.password = admin
spring.rabbitmq.addresses = 127.0.0.1:5672
# none：禁用发布确认模式，是默认值
# correlated : 异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback
# simple : 同步等待confirm结果，直到超时
spring.rabbitmq.publisher-confirm-type = correlated
spring.rabbitmq.publisher-confirms = true
## true 交换机无法将消息进行路由时，会将该消息返回给生产者
## false 如果发现消息无法进行路由，则直接丢弃
spring.rabbitmq.publisher-returns = true
#开启手动消息确认
spring.rabbitmq.listener.simple.acknowledge-mode = manual







spring.shardingsphere.enabled=true




# ########  数据源  ################

mysql.url = 127.0.0.1
mysql.db = ${datasource.db-name:test}
mysql.username = ${datasource.username:root}
mysql.password = ${datasource.password:123456}
# 读写分离失效，全部走主库
rw.datasource.master.only = false
# 当有从库和ADB时，true:走ADB false:走丛库
rw.datasource.adbRead.only = ${adb.read.config:false}

spring.shardingsphere.datasource.names = master,slave,adb
# 主数据源
spring.shardingsphere.datasource.master.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master.url = jdbc:mysql://${mysql.url}:3306/${mysql.db}?characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&allowMultiQueries=true&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.master.username = ${mysql.username}
spring.shardingsphere.datasource.master.password = ${mysql.password}
spring.shardingsphere.datasource.master.timeBetweenEvictionRunsMillis = 60000
spring.shardingsphere.datasource.master.maxWait = 60000
spring.shardingsphere.datasource.master.maxActive = 20
spring.shardingsphere.datasource.master.removeAbandonedTimeout = 300
spring.shardingsphere.datasource.master.initial-size = 4
spring.shardingsphere.datasource.master.testWhileIdle = true
spring.shardingsphere.datasource.master.minEvictableIdleTimeMillis = 300000
spring.shardingsphere.datasource.master.min-idle = 4
spring.shardingsphere.datasource.master.removeAbandoned = true
spring.shardingsphere.datasource.master.logAbandoned = true
spring.shardingsphere.datasource.master.filters = stat
spring.shardingsphere.datasource.master.web-stat-filter.enabled = true
spring.shardingsphere.datasource.master.poolPreparedStatements = true
spring.shardingsphere.datasource.master.maxPoolPreparedStatementPerConnectionSize = 20
spring.shardingsphere.datasource.master.testOnBorrow = false
spring.shardingsphere.datasource.master.testOnReturn = false

# 从数据源
spring.shardingsphere.datasource.slave.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave.url = jdbc:mysql://${mysql.url}:3306/test_1?characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&allowMultiQueries=true&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.slave.username = ${mysql.username}
spring.shardingsphere.datasource.slave.password = ${mysql.password}
spring.shardingsphere.datasource.slave.timeBetweenEvictionRunsMillis = 60000
spring.shardingsphere.datasource.slave.maxWait = 60000
spring.shardingsphere.datasource.slave.maxActive = 20
spring.shardingsphere.datasource.slave.removeAbandonedTimeout = 300
spring.shardingsphere.datasource.slave.initial-size = 4
spring.shardingsphere.datasource.slave.testWhileIdle = true
spring.shardingsphere.datasource.slave.minEvictableIdleTimeMillis = 300000
spring.shardingsphere.datasource.slave.min-idle = 4
spring.shardingsphere.datasource.slave.removeAbandoned = true
spring.shardingsphere.datasource.slave.logAbandoned = true
spring.shardingsphere.datasource.slave.filters = stat
spring.shardingsphere.datasource.slave.web-stat-filter.enabled = true
spring.shardingsphere.datasource.slave.poolPreparedStatements = true
spring.shardingsphere.datasource.slave.maxPoolPreparedStatementPerConnectionSize = 20
spring.shardingsphere.datasource.slave.testOnBorrow = false
spring.shardingsphere.datasource.slave.testOnReturn = false

# 从数据源
spring.shardingsphere.datasource.adb.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.adb.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.adb.url = jdbc:mysql://${mysql.url}:3306/test_1?characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&allowMultiQueries=true&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.adb.username = ${mysql.username}
spring.shardingsphere.datasource.adb.password = ${mysql.password}
spring.shardingsphere.datasource.adb.timeBetweenEvictionRunsMillis = 60000
spring.shardingsphere.datasource.adb.maxWait = 60000
spring.shardingsphere.datasource.adb.maxActive = 20
spring.shardingsphere.datasource.adb.removeAbandonedTimeout = 300
spring.shardingsphere.datasource.adb.initial-size = 4
spring.shardingsphere.datasource.adb.testWhileIdle = true
spring.shardingsphere.datasource.adb.minEvictableIdleTimeMillis = 300000
spring.shardingsphere.datasource.adb.min-idle = 4
spring.shardingsphere.datasource.adb.removeAbandoned = true
spring.shardingsphere.datasource.adb.logAbandoned = true
spring.shardingsphere.datasource.adb.filters = stat
spring.shardingsphere.datasource.adb.web-stat-filter.enabled = true
spring.shardingsphere.datasource.adb.poolPreparedStatements = true
spring.shardingsphere.datasource.adb.maxPoolPreparedStatementPerConnectionSize = 20
spring.shardingsphere.datasource.adb.testOnBorrow = false
spring.shardingsphere.datasource.adb.testOnReturn = false

#logi_order分表规则
spring.shardingsphere.rules.sharding.tables.logi_order.actual-data-nodes = readwrite_ds.logi_order_$->{0..15}
spring.shardingsphere.rules.sharding.tables.logi_order.table-strategy.standard.sharding-column = shipper_cid
spring.shardingsphere.rules.sharding.tables.logi_order.table-strategy.standard.sharding-algorithm-name = logi-order-inline
spring.shardingsphere.rules.sharding.sharding-algorithms.logi-order-inline.type = INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.logi-order-inline.props.algorithm-expression = logi_order_$->{(Long)shipper_cid % 16}
#logi_order_extend分表规则
spring.shardingsphere.rules.sharding.tables.logi_order_extend.actual-data-nodes = readwrite_ds.logi_order_extend_$->{0..15}
spring.shardingsphere.rules.sharding.tables.logi_order_extend.table-strategy.standard.sharding-column = shipper_id
spring.shardingsphere.rules.sharding.tables.logi_order_extend.table-strategy.standard.sharding-algorithm-name = logi-order-extend-inline
spring.shardingsphere.rules.sharding.sharding-algorithms.logi-order-extend-inline.type = INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.logi-order-extend-inline.props.algorithm-expression = logi_order_extend_$->{(Long)shipper_id % 16}
#logi_order_apply分表规则
spring.shardingsphere.rules.sharding.tables.logi_order_apply.actual-data-nodes = readwrite_ds.logi_order_apply_$->{0..15}
spring.shardingsphere.rules.sharding.tables.logi_order_apply.table-strategy.standard.sharding-column = payer_id
spring.shardingsphere.rules.sharding.tables.logi_order_apply.table-strategy.standard.sharding-algorithm-name = logi-order-apply-inline
spring.shardingsphere.rules.sharding.sharding-algorithms.logi-order-apply-inline.type = INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.logi-order-apply-inline.props.algorithm-expression = logi_order_apply_$->{(Long)payer_id % 16}
# 主库和从库指定
spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.type = DYWL
spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.props.write-data-source-name = master
spring.shardingsphere.rules.readwrite-splitting.data-sources.readwrite_ds.props.read-data-source-names = slave,adb
# 打印 SQL
spring.shardingsphere.props.sql-show = true
