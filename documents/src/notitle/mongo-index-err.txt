org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'TRANSPORT_FEE': Unsatisfied dependency expressed through field 'orderManager'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderManager': Unsatisfied dependency expressed through field 'orderLogManager'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogManagerImpl': Unsatisfied dependency expressed through field 'orderLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:845)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:743)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:390)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1214)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1203)
	at com.dywl.logistics.order.OrderServiceApplication.main(OrderServiceApplication.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderManager': Unsatisfied dependency expressed through field 'orderLogManager'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogManagerImpl': Unsatisfied dependency expressed through field 'orderLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 26 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogManagerImpl': Unsatisfied dependency expressed through field 'orderLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 39 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 52 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 65 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 78 common frames omitted
Caused by: org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.createIndex(MongoPersistentEntityIndexCreator.java:162)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.checkForAndCreateIndexes(MongoPersistentEntityIndexCreator.java:135)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.checkForIndexes(MongoPersistentEntityIndexCreator.java:127)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.<init>(MongoPersistentEntityIndexCreator.java:93)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.<init>(MongoPersistentEntityIndexCreator.java:70)
	at org.springframework.data.mongodb.core.MongoTemplate.<init>(MongoTemplate.java:249)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration.mongoTemplate(MongoDbFactoryDependentConfiguration.java:61)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration$$EnhancerBySpringCGLIB$$9455ae8.CGLIB$mongoTemplate$0(<generated>)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration$$EnhancerBySpringCGLIB$$9455ae8$$FastClassBySpringCGLIB$$7b87e061.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration$$EnhancerBySpringCGLIB$$9455ae8.mongoTemplate(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 79 common frames omitted
Caused by: com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at com.mongodb.internal.connection.ProtocolHelper.getCommandFailureException(ProtocolHelper.java:179)
	at com.mongodb.internal.connection.InternalStreamConnection.receiveCommandMessageResponse(InternalStreamConnection.java:293)
	at com.mongodb.internal.connection.InternalStreamConnection.sendAndReceive(InternalStreamConnection.java:255)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection.sendAndReceive(UsageTrackingInternalConnection.java:99)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.sendAndReceive(DefaultConnectionPool.java:444)
	at com.mongodb.internal.connection.CommandProtocolImpl.execute(CommandProtocolImpl.java:72)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor.execute(DefaultServer.java:200)
	at com.mongodb.internal.connection.DefaultServerConnection.executeProtocol(DefaultServerConnection.java:269)
	at com.mongodb.internal.connection.DefaultServerConnection.command(DefaultServerConnection.java:131)
	at com.mongodb.internal.connection.DefaultServerConnection.command(DefaultServerConnection.java:123)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:242)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:233)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:170)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:163)
	at com.mongodb.operation.CreateIndexesOperation$1.call(CreateIndexesOperation.java:174)
	at com.mongodb.operation.CreateIndexesOperation$1.call(CreateIndexesOperation.java:169)
	at com.mongodb.operation.OperationHelper.withConnectionSource(OperationHelper.java:453)
	at com.mongodb.operation.OperationHelper.withConnection(OperationHelper.java:415)
	at com.mongodb.operation.CreateIndexesOperation.execute(CreateIndexesOperation.java:169)
	at com.mongodb.operation.CreateIndexesOperation.execute(CreateIndexesOperation.java:70)
	at com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(MongoClientDelegate.java:193)
	at com.mongodb.client.internal.MongoCollectionImpl.executeCreateIndexes(MongoCollectionImpl.java:805)
	at com.mongodb.client.internal.MongoCollectionImpl.createIndexes(MongoCollectionImpl.java:788)
	at com.mongodb.client.internal.MongoCollectionImpl.createIndexes(MongoCollectionImpl.java:783)
	at com.mongodb.client.internal.MongoCollectionImpl.createIndex(MongoCollectionImpl.java:768)
	at org.springframework.data.mongodb.core.DefaultIndexOperations.lambda$ensureIndex$0(DefaultIndexOperations.java:135)
	at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:544)
	at org.springframework.data.mongodb.core.DefaultIndexOperations.execute(DefaultIndexOperations.java:218)
	at org.springframework.data.mongodb.core.DefaultIndexOperations.ensureIndex(DefaultIndexOperations.java:121)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.createIndex(MongoPersistentEntityIndexCreator.java:145)
	... 95 common frames omitted

2022-04-08 17:39:04.172 prod,logistics-order,,,, ERROR org.springframework.boot.SpringApplication 822 - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'TRANSPORT_FEE': Unsatisfied dependency expressed through field 'orderManager'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderManager': Unsatisfied dependency expressed through field 'orderLogManager'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogManagerImpl': Unsatisfied dependency expressed through field 'orderLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:845)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:743)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:390)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1214)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1203)
	at com.dywl.logistics.order.OrderServiceApplication.main(OrderServiceApplication.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderManager': Unsatisfied dependency expressed through field 'orderLogManager'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogManagerImpl': Unsatisfied dependency expressed through field 'orderLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 26 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogManagerImpl': Unsatisfied dependency expressed through field 'orderLogDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 39 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'orderLogDao': Unsatisfied dependency expressed through field 'mongoTemplate'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 52 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [org/springframework/boot/autoconfigure/data/mongo/MongoDbFactoryDependentConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 65 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 78 common frames omitted
Caused by: org.springframework.dao.DataIntegrityViolationException: Cannot create index for 'businessSerialNo' in collection 'business_statement' with keys 'Document{{businessSerialNo=1}}' and options 'Document{{name=businessSerialNo, unique=true}}'.; nested exception is com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.createIndex(MongoPersistentEntityIndexCreator.java:162)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.checkForAndCreateIndexes(MongoPersistentEntityIndexCreator.java:135)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.checkForIndexes(MongoPersistentEntityIndexCreator.java:127)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.<init>(MongoPersistentEntityIndexCreator.java:93)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.<init>(MongoPersistentEntityIndexCreator.java:70)
	at org.springframework.data.mongodb.core.MongoTemplate.<init>(MongoTemplate.java:249)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration.mongoTemplate(MongoDbFactoryDependentConfiguration.java:61)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration$$EnhancerBySpringCGLIB$$9455ae8.CGLIB$mongoTemplate$0(<generated>)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration$$EnhancerBySpringCGLIB$$9455ae8$$FastClassBySpringCGLIB$$7b87e061.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration$$EnhancerBySpringCGLIB$$9455ae8.mongoTemplate(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 79 common frames omitted
Caused by: com.mongodb.MongoCommandException: Command failed with error 85 (IndexOptionsConflict): 'Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: "businessSerialNo", ns: "dywl.business_statement" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: "businessSerialNo_1", ns: "dywl.business_statement", background: true }' on server 172.26.252.26:27017. The full response is { "raw" : { "shard1/172.26.252.25:27016,172.26.252.26:27016,172.26.252.27:27016" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" }, "shard2/172.26.252.90:27017,172.26.252.91:27017,172.26.252.92:27017" : { "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "code" : 85, "codeName" : "IndexOptionsConflict" } }, "code" : 85, "codeName" : "IndexOptionsConflict", "ok" : 0.0, "errmsg" : "Index: { v: 2, unique: true, key: { businessSerialNo: 1 }, name: \"businessSerialNo\", ns: \"dywl.business_statement\" } already exists with different options: { v: 2, key: { businessSerialNo: 1.0 }, name: \"businessSerialNo_1\", ns: \"dywl.business_statement\", background: true }", "operationTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "$clusterTime" : { "clusterTime" : { "$timestamp" : { "t" : 1649410743, "i" : 5 } }, "signature" : { "hash" : { "$binary" : "AAAAAAAAAAAAAAAAAAAAAAAAAAA=", "$type" : "00" }, "keyId" : { "$numberLong" : "0" } } } }
	at com.mongodb.internal.connection.ProtocolHelper.getCommandFailureException(ProtocolHelper.java:179)
	at com.mongodb.internal.connection.InternalStreamConnection.receiveCommandMessageResponse(InternalStreamConnection.java:293)
	at com.mongodb.internal.connection.InternalStreamConnection.sendAndReceive(InternalStreamConnection.java:255)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection.sendAndReceive(UsageTrackingInternalConnection.java:99)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.sendAndReceive(DefaultConnectionPool.java:444)
	at com.mongodb.internal.connection.CommandProtocolImpl.execute(CommandProtocolImpl.java:72)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor.execute(DefaultServer.java:200)
	at com.mongodb.internal.connection.DefaultServerConnection.executeProtocol(DefaultServerConnection.java:269)
	at com.mongodb.internal.connection.DefaultServerConnection.command(DefaultServerConnection.java:131)
	at com.mongodb.internal.connection.DefaultServerConnection.command(DefaultServerConnection.java:123)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:242)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:233)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:170)
	at com.mongodb.operation.CommandOperationHelper.executeWrappedCommandProtocol(CommandOperationHelper.java:163)
	at com.mongodb.operation.CreateIndexesOperation$1.call(CreateIndexesOperation.java:174)
	at com.mongodb.operation.CreateIndexesOperation$1.call(CreateIndexesOperation.java:169)
	at com.mongodb.operation.OperationHelper.withConnectionSource(OperationHelper.java:453)
	at com.mongodb.operation.OperationHelper.withConnection(OperationHelper.java:415)
	at com.mongodb.operation.CreateIndexesOperation.execute(CreateIndexesOperation.java:169)
	at com.mongodb.operation.CreateIndexesOperation.execute(CreateIndexesOperation.java:70)
	at com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(MongoClientDelegate.java:193)
	at com.mongodb.client.internal.MongoCollectionImpl.executeCreateIndexes(MongoCollectionImpl.java:805)
	at com.mongodb.client.internal.MongoCollectionImpl.createIndexes(MongoCollectionImpl.java:788)
	at com.mongodb.client.internal.MongoCollectionImpl.createIndexes(MongoCollectionImpl.java:783)
	at com.mongodb.client.internal.MongoCollectionImpl.createIndex(MongoCollectionImpl.java:768)
	at org.springframework.data.mongodb.core.DefaultIndexOperations.lambda$ensureIndex$0(DefaultIndexOperations.java:135)
	at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:544)
	at org.springframework.data.mongodb.core.DefaultIndexOperations.execute(DefaultIndexOperations.java:218)
	at org.springframework.data.mongodb.core.DefaultIndexOperations.ensureIndex(DefaultIndexOperations.java:121)
	at org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexCreator.createIndex(MongoPersistentEntityIndexCreator.java:145)
	... 95 common frames omitted
